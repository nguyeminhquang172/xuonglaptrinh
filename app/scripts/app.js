// Generated by CoffeeScript 1.7.1
  'use strict';
  angular.module('app',
    [
      'ngRoute', 'ngAnimate', 'ui.bootstrap', 'app.controllers', 'app.localization',
      'app.nav', 'app.ui.form.ctrls', 'ui.router', 'LocalStorageModule', 'lbServices'
    ])
    .constant('appConfig', {
      apiHost: 'http://vsoft.vn:8888/api'
    })
    .config(['$stateProvider', '$urlRouterProvider', '$httpProvider',
      function($stateProvider, $urlRouterProvider, $httpProvider){

        $stateProvider
          .state('app', {
            url: '',
            views: {
              "header": { templateUrl: 'views/header.html' },
              "navbar": { templateUrl: 'views/nav.html' },
              "mainContain": { templateUrl: 'views/main.html' }
            },
            accessLevel: window.userCan.accessUser
          })
          .state('app.main', {
            url: '/main',
            views: {
              'contenView': {
                controller: 'DashboardCtrl',
                // templateUrl: 'views/learning/board.html'
              }
            },
            accessLevel: window.userCan.accessUser
          })
          .state('app.board', {
            url: '/learning/board.html',
            templateUrl: 'views/learning/board.html',
          })
          .state('app.invoices', {
            url: '/user/invoice',
            views:{
              'contenView': {
                controller: 'userInvoice',
                templateUrl: 'views/user/invoice.html'
              }
            },
            accessLevel: window.userCan.accessUser
          })
          .state('app.courses', {
            url: '/courses',
            views: {
              'contenView': {
                templateUrl: 'views/courses/course.html',
                controller: 'course'
              }
            }
          })
          .state('app.register', {
            url: '/register',
            views: {
              'contenView':{
                controller: 'register',
                templateUrl: 'views/register.html'
              }
            }
          })
          .state('app.editCourse', {
            url: '/manager/course/edit/:courseId.html',
            views: {
              'contenView':{
                controller: 'editCourse',
                templateUrl: 'views/manager/courses/edit.html'
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.editSession', {
            url: '/manager/session/edit/:sessionId.html',
            views: {
              'contenView': {
                controller: 'editSession',
                templateUrl: 'views/manager/sessions/edit.html'
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.session', {
            url: '/course/:courseId.html',
            views: {
              'contenView': {
                controller: 'session',
                templateUrl: 'views/courses/sessions.html'
              }
            },
            // accessLevel: window.userCan.accessUser
          })
          .state('app.managerCourse', {
            url: '/manager/courses',
            views: {
              'contenView': {
                controller: 'course',
                templateUrl: 'views/manager/courses/lists.html'
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.managerInvoice', {
            url: '/manager/invoices',
            views: {
              'contenView': {
                controller: 'invoice',
                templateUrl: 'views/manager/invoices/lists.html'
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.managerSession', {
            url: '/manager/:courseId/sessions',
            views: {
              'contenView': {
                controller: 'sessionOfCourse',
                templateUrl: 'views/manager/sessions/lists.html'
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.viewCourse', {
            url: '/manager/course/view/:courseId.html:',
            views: {
              'contenView': {
                controller: 'viewCourse',
                templateUrl: 'views/manager/courses/course-detail.html',
              }
            }
          })
          .state('app.viewSession', {
            url: '/manager/session/view/:sessionId.html:',
            views: {
              'contenView': {
                controller: 'viewSession',
                templateUrl: 'views/manager/sessions/session-detail.html',
              }
            }
          })
          .state('app.editInvoice', {
            url: '/manager/invoice/view/:invoiceId.html:',
            views: {
              'contenView': {
                controller: 'editInvoice',
                templateUrl: 'views/manager/invoices/invoice-detail.html',
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.managerBillCourse', {
            url: '/manager/courses/:courseId/bills',
            views: {
              'contenView' :{
                controller: 'billOfCourse',
                templateUrl: 'views/manager/invoices/lists.html'
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.managerUserCourse', {
            url: '/manager/courses/:courseId/users',
            views: {
              'contenView': {
                controller: 'managerUserCourse',
                templateUrl: 'views/manager/users/lists.html'
              }
            }
          })
          .state('app.updateUserCourse', {
            url: '/manager/users/:userId/update',
            views: {
              'contenView': {
                controller: 'updateUserCourse',
                templateUrl: ''
              }
            }
          })
          .state('app.managerUser', {
            url: '/manager/users',
            views: {
              'contenView': {
                templateUrl: 'views/manager/users/lists.html',
                controller: 'managerUser'
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.addUser', {
            url: '/manager/user/add',
            views: {
              'contenView': {
                controller: 'addUser',
                templateUrl: 'views/manager/users/templates/add.html',
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.addCourse', {
            url: '/manager/courses/add',
            views: {
              'contenView': {
                controller: 'addCourse',
                templateUrl: 'views/manager/addCourse.html',
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.addSession', {
            url: '/manager/:courseId/session/add.html',
            views: {
              'contenView': {
                controller: 'addSession',
                templateUrl: 'views/manager/sessions/templates/add.html',
              }
            },
            accessLevel: window.userCan.accessManager
          })
          .state('app.profile', {
            url: '/user/profile',
            views: {
              'contenView': {
                templateUrl: 'views/user/profile.html',
                controller: 'userProfile'
              }
            }
          })
          .state('app.login', {
            url: '/login',
            views: {
              'contenView': {
                controller: 'login',
                templateUrl: 'views/pages/signin.html'
              }
            }
          })
          .state('app.changePass', {
            url: '/user/change-password',
            views: {
              'contenView': {
                templateUrl: 'views/pages/change-password.html'
              }
            },
            accessLevel: window.userCan.accessUser
          })
          .state('app.forgotPass', {
            url: '/forgot-password',
            views: {
              'contenView': {
                templateUrl: 'views/pages/forgot-password.html'
              }
            }
          })
          ;
          $urlRouterProvider.otherwise('/learning/board.html')
      }
    ])
  .run(['$rootScope', '$state', '$location', 'auth', 'User',
  function($rootScope, $state, $location, auth, User){
    $rootScope.$on('$stateChangeStart', function (event, to, toParams, fromState, from) {

      $rootScope.userInfo = {};
      $rootScope.token = User.getCurrentToken() ? User.getCurrentToken() : null;
      console.log('$rootScope token: ', $rootScope.token);


      User.getCurrent().$promise.then(function(data){
        console.log('user current: ', data);
        $rootScope.userInfo.userName = data.fullName;
        $rootScope.userInfo.avatar = data.avatar;
        var roleCurrent = data.role;
        if(roleCurrent == 'teacher'){
          $rootScope.role = 2;
        }else if(roleCurrent == 'admin'){
          $rootScope.role = 3;
        }else if(roleCurrent == 'user'){
          $rootScope.role = 1;
        }else{
          $rootScope.role = null;
        }
        auth.setLocalRole($rootScope.role);
      });


        if (User.getCurrentToken() === null) {
          console.log('not token');
            auth.pendingStateChange = {
                to: to,
                toParams: toParams
            };
        }else{
          // when refresh
          if(to.url === '/login'){
            $rootScope.goToState('app.courses');
          }
        }
        if (to.accessLevel === undefined || auth.authorize(to.accessLevel)) {
            console.log('access level :', true);
        } else {
            console.log('access level :', false);
            event.preventDefault();
            $state.go('app.courses');
        }
    });
    $rootScope.goToState = function(state){
      $state.go(state);
    };

    $rootScope.isTeacher = function(){
      return (User.isAuthenticated && $rootScope.role == 2);
    }
    $rootScope.isAdmin = function(){
      console.log('isAdmin: ', User.isAuthenticated() && $rootScope.role == 3);
      return (User.isAuthenticated() && $rootScope.role == 3);
    }
    $rootScope.isManager = function(){
      return ($rootScope.isTeacher() || $rootScope.isAdmin());
    }
    $rootScope.isLogined = function(){
      return User.isAuthenticated();
    };
    $rootScope.logout = function(){
      auth.clearLocalRole();
      User.logout();
      $rootScope.goToState('app.courses');
    };
  }])
  .factory('getFieldFac', ['$http', '$q', function($http, $q){
    var defer = $q.defer();
    return {
      getField: function(){
        var data = [{course1:'nodejs'}, {course2: 'angular'}];
        $http({
          method: 'get',
          url: 'http://vsoft.vn:8888/api/courses'
        })
        .success(function(result){
          console.log('result :', result);
          defer.resolve(result);
        })
        .error(function(err){
          console.log('err 2: ', err);
          defer.reject(err);
        });
        return defer.promise;
      }
    }
  }])
  .factory('httpFac', ['$http', 'appConfig', 'User', function($http, appConfig, User){
    return {
      httpFn: function(_table, _method, _id, callBack){
        $http({
          url: appConfig.apiHost+'/'+_table+'/'+_id,
          method: _method
        })
        .success(function(data){
          console.log('delete success: ', data);
          console.log('url : ', appConfig.apiHost+'/'+_table+'/'+_id);
          callBack(data);
        },
        function(error){
          console.log('delete error: ', error);
          callBack(error);
        });
      },
      httpTwoParams: function(_table, _method, callBack){
        $http({
          url: appConfig.apiHost+'/'+_table+'/'+_id,
          method: _method
        })
        .success(function(data, status){
          console.log('httpTwoParams status: ', status);
          callBack(status);
        }, function(err){
          console.log('httpTwoParams err: ', err);
          callBack(err);
        })
      },
      httpUpdate: function(_table, _method, _id, _data, callBack){
        $http({
          url: appConfig.apiHost+'/'+_table+'/'+_id,
          method: _method,
          data: _data
        })
        .success(function(status){
          callBack(status);
        }, function(error){
          callBack(error);
        });
      },
      httpRegisterCourse: function(_courseID, _totalMount, callBack){
        var datas = {},
            userID = User.getCurrentId();
            if(userID !== null || _courseID !== null || _totalMount !== null){
              datas.userID = userID;
              datas.courseID = _courseID;
              datas.totalMount = _totalMount;
              console.log('data resgiter course: ', datas);
              $http({
                url: appConfig.apiHost+'/bills',
                method: 'post',
                data: datas
              })
              .success(function(result, status){
                console.log('status resgiter course success: ', status);
                callBack(status);
              }, function(err, status){
                console.log('status resgiter course err: ', err);
                callBack(status);
              })
            }
      }
    }
  }])
  .factory('httpAdd', ['$http', 'appConfig', function($http, appConfig){
    return {
      httpFn: function(_table, _data, callBack){
        console.log('httpAdd', _data);
        var urlApi = appConfig.apiHost+'/'+_table;
        console.log('api register : ', urlApi);
        console.log('data register: ', _data);
        $http({
          url: urlApi,
          method: 'post',
          data: _data
        })
        .success(function(data, status){
          console.log('data 2: ', data);
          console.log('status: ', status);
          callBack(status);
        }, function(error, status){
          console.log('err registerCourse: ', status);
          console.log('error add: ', error);
          console.log(status);
        })
      }
    }
  }])
  .factory('modalFac', ['$modal', function($modal){
      return {
        open:function () {
          var modalInstance = $modal.open({
            templateUrl: 'myModalContent.html',
            controller: 'ModalInstanceCtrl',
            size: 'sm'
          });

          modalInstance.result.then(function (selectedItem) {
            console.log('ok')
          }, function () {
            console.log('cancel');
          });
        }
      }
  }])
  .factory('auth',['$http', 'localStorageService', 'appConfig', 'User', '$rootScope',
  function($http, localStorageService, appConfig, User, $rootScope){
    var _role = 'role',
        Authorization = 'Authorization',
        _courseID = 'courseID';
    return {
      setHeaderToken: function(){
        var token = User.getCurrentToken();
        console.log('token: ', token);
        $http.defaults.headers.common[Authorization] = token;
      },
      setLocalRole: function(role){
        localStorageService.set(_role, role);
      },
      getLocalRole: function(){
        return localStorageService.get(_role);
      },
      clearLocalRole: function(){
        localStorageService.set(_role, null);
      },
      pendingStateChange: null,
      resolvePendingState: function (httpPromise) {
          var checkUser = $q.defer();
          var me = this;
          var pendingState = me.pendingStateChange;
          httpPromise
              .success(function (data) {
                  if (data.success) {
                      me.setUser(data.user);
                      console.log('pendingState.to.accessLevel: ', pendingState.to.accessLevel);
                      if (pendingState.to.accessLevel === undefined || me.authorize(pendingState.to.accessLevel)) {
                          checkUser.resolve();
                          console.log('checkUser.resolve')
                      } else {
                          checkUser.reject('unauthorized'); // may be 403
                      }
                  } else {
                      checkUser.reject('401');
                  }
              })
              .error(function (err, status, headers, config) {
                  checkUser.reject(status.toString());
              });
          me.pendingStateChange = null;
          return checkUser.promise;
      },

      authorize: function (accessLevel) {
        var tokenUser = User.getCurrentToken();
        console.log('getCurrentToken: ', User.getCurrentToken());
        console.log('$rootScope.role: ', $rootScope.role);
          if (null !== tokenUser) {
            var result = accessLevel.bitMask <= this.getLocalRole();
            return result;
        } else {
          console.log('return false');
            return false;
        }
      },
      login: function(user, callBack){
        User.login(user, function(data){
          console.log('data logi success: ', data);
          callBack(200);
        }, function(err){
          callBack(err.status);
        })
      }
    }
  }])
  .directive('dataEmpty', function(){
    return {
      restrict: 'A',
      controller: function($scope){
        $scope.alert = function(){
          alert('data empty');
        }
      }
    }
  })
  .directive('regcourse',[function(){
    return {
      scope: true,
      controller: function(){
        this.dirChild = function(){
          alert('multiple controller');
          console.log('multiple controller');
        }
      }
    }
  }])
  .directive('similarCourse', function(){
      return {
        restrict: 'A',
        scope:{
          sourceApi: '@',
          typeMethod: '@',
          template: '@',
          fields: '@',
          getParam: '&',
          filters: '&',
          updateData: '&',
          id: '@'
        },
        link: function (scope, element, attributes, regcourseCtrl) {
            scope.courseRegister = function(){
              regcourseCtrl.dirChild();
            }
        },
        controller: function($rootScope, $scope, $http, $parse, $modal, $state, $window, getFieldFac, httpFac, auth, localStorageService, appConfig, User){
          $scope.download = function(_id){
            httpFac.httpFn('chapters','get',_id, function(result){
              if(result.slide.status !== "public"){
                if($rootScope.isLogined()){
                  console.log('getLocalCourseID: ', $scope.getLocalCourseID());
                  console.log('userID: ', $rootScope.userInfo.userId);
                  $http({
                    method: 'get',
                    url: appConfig.apiHost + '/users'
                  })
                  .success(function(data, status){
                    console.log('data token: ', data);
                  })
                  .error(function(err, status){
                    console.log('err', err);
                  })
                }else{
                  $rootScope.goToState('app.login');
                }
              }else{
                console.log('public');
              }
            })
          };
          // console.log($parse($scope.fields)($scope).length);
          // orderBy:
          $scope.order = function(predicate, reverse) {
            $scope.pros = orderBy($scope.pros, predicate, reverse);
          };
          // End orderBy
          $scope.isTeacher = function(){
            return (User.isAuthenticated && $rootScope.role == 2);
          }
          var _courseID = 'courseID';
          $scope.setLocalCourseID= function(courseId){
            localStorageService.set(_courseID, courseId);
          };
          $scope.getLocalCourseID= function(){
            return localStorageService.get(_courseID);
          };
          var _title = 'title';
          $scope.setLocalTitle = function(title){
            console.log('setLocalTitle: ', title);
            localStorageService.set(_title, title)
          };
          $scope.getLocalTitle= function(){
            return localStorageService.get(_title);
          };
          getFieldFac.getField().then(function (data) {
            $scope.listCourse = data;
            console.log('$scope.listCourse: ', $scope.listCourse);
          });
          var urlApi = $scope.sourceApi,
              type = $scope.typeMethod,
              template = $scope.template,
              params = $scope.getParam(),
              paramsUpdate = $scope.updateData(),
              filters = $scope.filters,
              _id = $scope.id;
          $scope.courseId = $scope.id;
              console.log('params get from controller pass attrs: ', params);
              console.log('params update: ', paramsUpdate);
          // Delete button
          // $scope.doc = 'default';
          $scope.open = function (arr,index, id) {
            $scope._index = index;
            $scope.arrData = arr;
            $scope.idDelete = id;
            var modalInstance = $modal.open({
              templateUrl: 'myModalContent.html',
              controller: ModalInstanceCtrl,
              scope : $scope,
              size: 'sm'
            });
            modalInstance.result.then(function () {
              $scope.arrData.splice($scope._index, 1);
            }, function () {
              console.log('cancel');
            });
          };

          var ModalInstanceCtrl = function ($scope, $modalInstance, httpFac) {
            $scope.dochange = function (){
              // console.log($scope.doc)
            }
            $scope.ok = function (_table) {
              console.log('ok', _table);
              httpFac.httpFn(_table, 'delete', $scope.idDelete, function(data){
                console.log('delete call : ', data);
              });
              $modalInstance.close($scope.id);
            };
            $scope.cancel = function (back) {
              $modalInstance.dismiss('cancel-fc');
              back ? $window.history.back():'';
            };
          };
          // End Delete button
          $scope.getId = function(id){
            // console.log('id : ', id);
            $rootScope.id = id;
          };
          $scope.editFn = function(data){
            $rootScope.editData = data;
          };
          $scope.update = function(_data){
            console.log('paramsUpdate[0].urlApi: ', paramsUpdate[0].urlApi)
            console.log('paramsUpdate[1].typeMethod: ', paramsUpdate[1].typeMethod);
            $http({
              url: paramsUpdate[0].urlApi,
              method: paramsUpdate[1].typeMethod,
              data: _data
            })
            .success(function(data, status){
              if(status === 200){
                var modalInstance = $modal.open({
                  templateUrl: 'myModalContent.html',
                  controller: ModalInstanceCtrl,
                  scope : $scope,
                  size: 'sm'
                });
                modalInstance.result.then(function () {
                }, function(){
                });
              }
            })
            .error(function(err){
              console.log('update error  : ', err);
            });
          };

          $scope.registerCourse = function(_courseID, _totalMount){
            console.log('registerCourse _courseID: ', _courseID);
            console.log('registerCourse _totalMount: ', _totalMount);
            if($rootScope.isLogined() === false){
              $rootScope.goToState('app.login');
            }else{
              httpFac.httpRegisterCourse(_courseID, _totalMount, function(result){
                if(result === 200){
                  var modalInstance = $modal.open({
                    templateUrl: 'myModalContent.html',
                    controller: ModalInstanceCtrl,
                    scope : $scope,
                    size: 'sm'
                  });
                  modalInstance.result.then(function () {
                  }, function(){
                  });
                }
              })
            }
          }

          var _url = '';
          if(params[2]){
            _url = params[0].urlApi + params[2].filterInclude
          }else{
            _url = params[0].urlApi
          }
          console.log('urlApi : ', _url);
          $http({
            url: _url,
            method: params[1].typeMethod
          })
          .success(function(data){
            console.log('data http : ', data);
              $scope.datas = data;
              $scope.data = data;
              $scope.courseName = {};
              $scope.courseName.title = data.courseID;
              console.log('$scope.courseName.title: ', $scope.courseName.title);

              // pagination
            $scope.totalItems = 64;
            $scope.currentPage = 4;
            $scope.setPage = function(pageNo) {
              return $scope.currentPage = pageNo;
            };
            $scope.maxSize = 5;
            $scope.bigTotalItems = 175;
            return $scope.bigCurrentPage = 1;
          // end pagination
          })
          .error(function(err){
            console.log('err : ', err);
          });
        },
        templateUrl: function(element, attrs){
          /*var btn = angular.element(document.querySelector("#update"));
          btn.bind('click', function(e){
            alert('fd');
          });*/
          var template = attrs["template"];
          return template;
        }
      }
  })
  .directive('dateTimePicker', [function(){
    return {
      restrict: 'E',
      replace: true,
      controller: function($scope){
        $scope.today = function() {
          return $scope.dt = new Date();
        };
        $scope.today();
        $scope.showWeeks = true;
        $scope.toggleWeeks = function() {
          return $scope.showWeeks = !$scope.showWeeks;
        };
        $scope.clear = function() {
          return $scope.dt = null;
        };
        $scope.toggleMin = function() {
          var _ref;
          return $scope.minDate = (_ref = $scope.minDate) != null ? _ref : {
            "null": new Date()
          };
        };
        $scope.toggleMin();
        $scope.open = function($event) {
          $event.preventDefault();
          $event.stopPropagation();
          return $scope.opened = true;
        };
        $scope.dateOptions = {
          'year-format': "'yy'",
          'starting-day': 1
        };
        $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'shortDate'];
        return $scope.format = $scope.formats[0];
      },
      template: '<div class="input-group ui-datepicker"> <input type="text" class="form-control" datepicker-popup="{{format}}" ng-model="dt" is-open="opened" min="minDate" max="2015-06-22" datepicker-options="dateOptions" date-disabled="disabled(date, mode)" ng-required="true" close-text="Close"> <span class="input-group-addon" ng-click="open($event)"><i class="fa fa-calendar"></i></span> </div>'
    }
  }])
;


